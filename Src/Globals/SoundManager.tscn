[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

onready var path = \"user://config.ini\"
var sfx_on = true
var bgm_on = true

onready var music_player = $MusicPlayer
var current_music_stream
var pause_position

onready var sfx_player = {
	1 : {
		\"node\" : $EffectPlayer1,
		\"sound\" : null
		},
	2 : {
		\"node\" : $EffectPlayer2,
		\"sound\" : null
		},
	3 : {
		\"node\" : $EffectPlayer3,
		\"sound\" : null
	}
}

var music = {
	\"default\" : \"res://Assets/Audio/bgm.ogg\",
}

var effect = {
	\"click\" : \"res://Assets/Audio/click.ogg\",
	\"coin\" : \"res://Assets/Audio/coinsplash.ogg\",
}


func _ready():
	load_config()


func save_config():
	var config = ConfigFile.new()
	config.set_value(\"audio\", \"sfx\", sfx_on)
	config.set_value(\"audio\", \"bgm\", bgm_on)
	var err = config.save(path)
	if err != OK:
		print(\"Error saving config file\")


func load_config():
	var config = ConfigFile.new()
	var default_settings = {
		\"sfx\" : true,
		\"bgm\" : true
		}
	var err = config.load(path)
	if err != OK:
		print(\"Load config error, setting to default values\")
	sfx_on = config.get_value(\"audio\", \"sfx\", default_settings[\"sfx\"])
	bgm_on = config.get_value(\"audio\", \"bgm\", default_settings[\"bgm\"])


func is_sfx_on():
	return sfx_on


func is_bgm_on():
	return bgm_on


func toggle_sfx():
	sfx_on = !sfx_on
	save_config()


func toggle_bgm():
	bgm_on = !bgm_on
	save_config()
	update_bgm_state()


func update_bgm_state():
	if is_bgm_on():
		play_bgm(\"default\")
	else:
		pause_bgm()


func play_random_music():
	var rand = round(rand_range(0, music.size() - 1))
	play_bgm(music.keys()[rand])


func play_bgm(music_name):
	if current_music_stream != null:
		pause_position = get_music_position()
		
	if current_music_stream != music[music_name]:
		current_music_stream = music[music_name]
		music_player.stream = load(current_music_stream)
	
	if is_bgm_on():
		resume_bgm()


func get_music_position():
	return music_player.get_playback_position()


func pause_bgm():
	pause_position = get_music_position()
	music_player.stop()


func resume_bgm():
	if current_music_stream == null:
		play_random_music()
	else:
		if get_music_position() == 0: 
			pause_position = 0
		music_player.play(pause_position)


func play_sfx(effect_name):
	if is_sfx_on():
		var stream = effect[effect_name]
		
		# Checking if sfx overlapped
		for i in range(1, sfx_player.size() + 1):
			if sfx_player[i][\"sound\"] == stream:
				_sfx_play(i, stream)
				return
				
		# If SFX not overlapping
		for i in range(1, sfx_player.size() + 1):
			if !sfx_player[i][\"node\"].playing:
				_sfx_play(i, stream)
				return


func _sfx_play(index, stream):
	sfx_player[index][\"sound\"] = stream 
	sfx_player[index][\"node\"].stream = load(stream)
	sfx_player[index][\"node\"].play()
"

[node name="SoundManager" type="Node"]
pause_mode = 2
script = SubResource( 1 )

[node name="MusicPlayer" type="AudioStreamPlayer" parent="."]

[node name="EffectPlayer1" type="AudioStreamPlayer" parent="."]

[node name="EffectPlayer2" type="AudioStreamPlayer" parent="."]

[node name="EffectPlayer3" type="AudioStreamPlayer" parent="."]
